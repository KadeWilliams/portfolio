// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"strconv"
	"time"
)

func Base(title string, content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/base.templ`, Line: 14, Col: 22}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</title><script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script><link href=\"/static/styles.css\" rel=\"stylesheet\"><script>\n            document.documentElement.style.setProperty(\n                '--accent',\n                [\n                    '#ff4136', '#ff851b', '#ffdc00', '#2ecc40','#0074d9', '#b10dc9'\n                ][new Date().getDay() % 6]\n            );\n\n            /*1. Delay the HTMX Trigger Until Page Load*/\n            // const weatherDiv = document.querySelector(\"#weather\");\n\n            // document.addEventListener('load', function() {\n            //     console.log(\"getting geolocation data\");\n            //     navigator.geolocation.getCurrentPosition(function(position) {\n            //         weatherDiv.setAttribute('hx-vals', JSON.stringify({\n            //             latitude: position.coords.latitude,\n            //             longitude: position.coords.longitude,\n            //         }));\n            //         htmx.trigger(weatherDiv, 'load');\n            //     });\n            // });\n\n            /*Use a Custom Trigger After Page Load*/\n            document.addEventListener('DOMContentLoaded', function() {\n                navigator.geolocation.getCurrentPosition(function(position) {\n                    window.latitude = position.coords.latitude;\n                    window.longitude = position.coords.longitude;\n                    htmx.trigger(htmx.find('[hx-trigger=\"geoload\"]'), 'geoload');\n            })});\n\n        // async function getLocation() {\n        //     let longitude, latitude;\n        //     if (navigator.geolocation) {\n        //         await navigator.geolocation.getCurrentPosition((position) => {\n        //         const coords = position.coords\n        //         const div = document.querySelector('#weather');\n        //         longitude = coords.longitude;\n        //         latitude = coords.latitude;\n        //         // Update hx-vals with actual coordinates\n        //         // div.setAttribute('hx-vals', `js:{latitude: ${coords.latitude}, longitude: ${coords.longitude}}`);\n        //     }\n        //     , errorCallback);\n        //     }\n        //     /*\n        //     const location = {longitude: \"\", latitude: \"\"}\n        //     if (\"geolocation\" in navigator) {\n        //         navigator.geolocation.getCurrentPosition(\n        //             (position) => {\n        //                 const latitude = position.coords.latitude;\n        //                 const longitude = position.coords.longitude;\n        //                 location.latitude = latitude;\n        //                 location.longitude = longitude;\n        //             },\n        //             (error) => {\n        //                 // Error: Handle geolocation errors\n        //                 console.error(\"Error getting geolocation:\", error);\n        //             }\n        //         );\n        //     } else {\n        //         // Geolocation not supported\n        //         console.log(\"Geolocation is not supported by this browser.\");\n        //     }\n        //     return location;\n        //     */\n\n        //     return {latitude: latitude, longitude: longitude}\n        // }\n\n        // function successCallback(position) {\n        //     const coords = position.coords\n        //     const div = document.querySelector('#weather');\n    \n        //     // Update hx-vals with actual coordinates\n        //     div.setAttribute('hx-vals', `js:{latitude: ${coords.latitude}, longitude: ${coords.longitude}}`);\n        //     // htmx.ajax(\"GET\", `/weather?latitude=${coords.latitude}&longitude=${coords.longitude}`, {\n        //     //     target: \"#weather\",\n        //     //     template: \"html\",\n        //     // });\n        //     // console.log(coords);\n        // }\n\n        // function errorCallback(error) {\n        //     console.error(\"Error getting geolocation\", error);\n        // }\n        </script><link href=\"/static/brutal.css\" rel=\"stylesheet\"></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Nav().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = SystemInfo().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<main>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</main><footer class=\"mono\"><span>&copy; ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(time.Now().Year()))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/base.templ`, Line: 111, Col: 58}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</span> <span>|</span> <span hx-get=\"/server-status\" hx-trigger=\"load, every 1s\">Loading...</span></footer></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
